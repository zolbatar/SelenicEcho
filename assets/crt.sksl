uniform float u_time;
uniform vec2 u_resolution;
uniform float u_dpi_scale;

float rand(vec2 co) {
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

// Simulate scanlines
float scanline(vec2 uv) {
    return sin(uv.y * u_resolution.y * 1.5) * 0.1;
}

// Simulate subtle screen distortion
vec2 distort(vec2 uv) {
    uv.y += sin(uv.x * 20.0 + u_time * 0.2) * 0.01;
    return uv;
}

// Simulate slight glitch flickers
float glitch(vec2 uv) {
    float noise = rand(vec2(floor(uv.y * 10.0), u_time * 5.0));
    return step(0.98, noise) * 0.1; // Random tiny flickers
}

half4 main(vec2 fragCoord) {
    vec2 uv = fragCoord / u_resolution * u_dpi_scale;

    // Apply CRT-style distortions
    uv = distort(uv);

    // Base terminal color (sci-fi green or amber)
    vec3 color = vec3(0.2, 1.0, 0.3); // Green
    color *= 0.9 + scanline(uv); // Add scanline effect
    color -= glitch(uv); // Add occasional flicker

    return half4(color, 1.0);
}