uniform float u_time;
uniform vec2 u_resolution;
uniform float u_dpi_scale;

// 2D random hash function
float hash(vec2 p) {
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
}

// Smooth noise function
float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    
    float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

// Fractal Brownian Motion for turbulence
float fbm(vec2 p) {
    float v = 0.0;
    float a = 0.5;
    
    for (int i = 0; i < 5; i++) {
        v += a * noise(p);
        p *= 2.0;
        a *= 0.5;
    }
    
    return v;
}

// Plasma bloom effect
float plasma(vec2 uv) {
    float t = u_time * 0.1; // Adjust animation speed
    float r = length(uv) * 2.0; // Radial scaling
    float turbulence = fbm(uv * 3.0 + vec2(sin(t * 0.3), cos(t * 0.2))); 
    
    // Animate expansion & contraction
    float bloom = sin(t + turbulence * 4.0) * 0.5 + 0.5;
    
    return bloom;
}

// Convert plasma value to RGB color
vec3 getPlasmaColor(float v) {
    float intensity = smoothstep(0.2, 0.8, v); // Smooth contrast range
    vec3 color = vec3(intensity * 0.9 + 0.1); // Subtle shades of grey
    vec3 grey = vec3(
        0.5 + 0.5 * cos(6.28318 * v + u_time * 0.3),
        0.5 + 0.5 * cos(6.28318 * v + 2.094 + u_time * 0.4),
        0.5 + 0.5 * cos(6.28318 * v + 4.188 + u_time * 0.5)
    );
    return mix(color, grey, 0.1);
}

half4 main(vec2 fragCoord) {
    vec2 uv = ((fragCoord * u_dpi_scale) / u_resolution) * 2.0 - 1.0; // Normalize to [-1,1]

    float plasmaValue = plasma(uv * 2.0); // Adjust scale
    vec3 plasmaColor = getPlasmaColor(plasmaValue);
    return half4(plasmaColor, 1.0);
}